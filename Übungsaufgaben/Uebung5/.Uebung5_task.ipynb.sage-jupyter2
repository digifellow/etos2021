{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-50adf259-4acd-410a-bd65-1e30a2490e22.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"}},"trust":false,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"1c35b4","input":"","metadata":{"jupyter":{"outputs_hidden":false}},"pos":56,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"295a79","input":"# Aufgabenteil d) : Startwerte\nt[0] = 0.0\n","metadata":{"jupyter":{"outputs_hidden":false}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2d3ebe","input":"import numpy as np\n\nx = np.array(x)\ny = np.array(y)\nt = np.array(t)\nphi = np.array(phi)","metadata":{"jupyter":{"outputs_hidden":false}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"44d394","input":"\n\ndef diffgleichung_loesen(phi_0):\n    N_I = 10000\n    Dt = t_max / N_I # Œîùë° in s\n\n    t = np.zeros(N_I+1)\n    phi = np.zeros(N_I+1)\n    phi_punkt = np.zeros(N_I+1)\n    \n    t[0] = 0.0\n    phi[0] = phi_0\n    phi_punkt[0] = 0.0\n    \n    for i in range(0, N_I):\n        t[i+1] = t[i]+Dt\n        phi[i+1]=phi[i]+Dt*phi_punkt[i]\n        phi_punkt[i+1]=phi_punkt[i]+Dt*phi_punktpunkt(phi[i])\n    \n    return t, phi, phi_punkt","metadata":{"jupyter":{"outputs_hidden":false}},"pos":47,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"530621","input":"\nimport matplotlib.pyplot as plt\n\n\nT= 1/f\nt= np.linspace(0,2*T)\n\n#x(t)\n\n#y(t)\n\n#Formatierung\n\n","metadata":{"jupyter":{"outputs_hidden":false}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"57fc20","input":"\n","metadata":{"jupyter":{"outputs_hidden":false}},"pos":48,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"6b01a8","input":"a_zp = \nprint('Die Beschleunigung betr√§gt %.2f m/s¬≤' %a_zp)","metadata":{"jupyter":{"outputs_hidden":false}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"790251","input":"\nimport numpy as np\nM = \nm = \ny = \nD =\nomega = \nf = 1/(np.pi)*omega\n\nprint('Die Frequenz betr√§gt %.2f Hz' %f)","metadata":{"jupyter":{"outputs_hidden":false}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"84d0b3","input":"\nm = \n\nF_zp =\n\nprint('Die Zentripetalkraft betr√§gt %.2f kN' %(F_zp/1000))","metadata":{"jupyter":{"outputs_hidden":false}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"867090","input":"r = \nprint('Der Radius betr√§gt %.2f m' %r)","metadata":{"jupyter":{"outputs_hidden":false}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"8f29b5","input":"\n@np.vectorize\ndef periodendauer(phi_0):\n    nullstellen = [] # Zu Beginn der Suche: keine Nullstellen gefunden\n    \n    t, phi, phi_dot = diffgleichung_loesen(phi_0)\n    \n    # Aufgabenteil j) vervollst√§ndigen Sie den Code\n    for i in range( , ): # hier\n        if      : # hier: Abpr√ºfen ob die Vorzeichen von phi[i] und phi[i+1] verschieden sind\n            nullstellen.append(   ) # hier: Nullstelle hinzuf√ºgen zur Liste\n\n    # Aufgabenteil k) Berechnen Sie T\n    T = \n\n    return T","metadata":{"jupyter":{"outputs_hidden":false}},"pos":52,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a08d5d","input":"\n# Vervollst√§ndigen Sie:\nT_kleinwinkel =   \n\narray_phi_0 = np.linspace(0.001, np.pi/2, 30)\narray_T = periodendauer(array_phi_0)\n\nplt.hlines(y=T_kleinwinkel, xmin=0.0, xmax=np.pi/2, color=\"r\")\nplt.plot(array_phi_0, array_T)\nplt.xlabel(r\"$\\varphi_0 [radians]$\")\nplt.ylabel(r\"$T [s]$\")\nplt.show()","metadata":{"jupyter":{"outputs_hidden":false}},"pos":55,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a0ffb4","input":"v = \nprint('Die Geschwindigkeit betr√§gt %.2f m/s' %v)","metadata":{"jupyter":{"outputs_hidden":false}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b1aa62","input":"%matplotlib widget\n%run achterbahn","metadata":{"jupyter":{"outputs_hidden":false}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b6776b","input":"\nx_0 = \nv_0 = \n\nA = \nB =\n\ndef x(t):\n    return\n\ndef v(t):\n    return \n","metadata":{"jupyter":{"outputs_hidden":false}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"bac5e5","input":"from ipywidgets import interact, FloatSlider\n\nslider2 = FloatSlider(description=r\"$\\varphi_0$\", value=np.pi/4, min=-np.pi/2, max=np.pi/2)\n\ndef kleinwinkelnaeherung(phi_0, t):\n    return np.cos((g/l)**0.5 * t) * phi_0\n\ndef plot_loesung(phi_0):\n    test_t, test_phi, test_phi_dot = diffgleichung_loesen(phi_0)\n    \n    plt.plot(test_t, test_phi)\n    plt.plot(test_t, kleinwinkelnaeherung(phi_0, test_t))\n    plt.xlabel(\"t [s]\")\n    plt.ylabel(\"phi [radians]\")\n    plt.ylim([-2,+2])\n    plt.show()\n\ninteract(plot_loesung, phi_0=slider2);","metadata":{"exercise":"solution","jupyter":{"outputs_hidden":false}},"pos":50,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c17b92","input":"\nN_I = 10000\nDt = t_max / N_I # Œîùë° in s\n\n# vervollst√§ndigen Sie:\ndef naechstes_phi(phi_i, phi_punkt_i):\n    return \n\n# bereits vorgegeben:\ndef naechstes_phi_punkt(phi_i, phi_punkt_i):\n    return phi_punkt_i + phi_punktpunkt(phi_i) * Dt","metadata":{"jupyter":{"outputs_hidden":false}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d4d564","input":"\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ng = 9.81 # m/s^2\nl = 1.0  # m\nt_max = 10.0 # s\nphi_0 = np.pi / 4 # Bogenma√ü\n\n# Funktion definieren\ndef phi_punktpunkt(phi):","metadata":{"jupyter":{"outputs_hidden":false}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e2b171","input":"# Test des bisherigen Programms\n\nplt.plot()\nplt.xlabel(\"\")\nplt.ylabel(\"\")\nplt.show()","metadata":{"jupyter":{"outputs_hidden":false}},"pos":42,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e31c56","input":"","metadata":{"jupyter":{"outputs_hidden":false}},"pos":43,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ea2bdf","input":"\n# Aufgabenteil c) : Erzeugen der Arrays\nt = \nphi = \nphi_punkt = ","metadata":{"jupyter":{"outputs_hidden":false}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f417c2","input":"t = np.array([0, 0.011, 0.022, 0.033, 0.044,0.055, 0.066, 0.077, 0.088, 0.1])    # in s\nphi = np.array([ 0, 11.851, 20.740, 26.666, 29.629, 29.629, 26.666, 20.740, 11.851, 0])  # -\n\nomega = np.zeros([len(t)])\nfor i in range(0,len(t)-1):\n    omega[i] = (phi[i+1] - phi[i])/(t[i+1]-t[i])","metadata":{"jupyter":{"outputs_hidden":false}},"pos":37,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fd78c6","input":"\n# Aufgabenteil e) : Vervollst√§ndigen Sie die folgende Zeile\nfor i in range( , ):\n    \n    # Aufgabenteil f) : Rekursionsformeln f√ºr t, phi, phi_dot\n    t[i+1] = t[i] + Dt\n    phi[i+1] = \n    phi_punkt[i+1] = ","metadata":{"jupyter":{"outputs_hidden":false}},"pos":39,"type":"cell"}
{"cell_type":"markdown","id":"0b1345","input":"\n<div style= \"color: black;background-color: rgba(0,177,172, 0.1) ;margin: 10 px auto; padding: 10px; border-radius: 10px\">\n<p style=\"font-size:12pt; text-align:center; color:   black;background-color: rgba(0,177,172, 0.1) ;margin: 10 px auto; padding: 10px; border-radius: 10px\" id=\"1\"><b>  Aufgabe 1 </b>  </p> \n    \nDer *Blue Fire* Megacoaster im Europa-Park ist eine Stahlachterbahn vom Modell Launched Coaster. Das Fahrzeug gelangt nach einer kurzen Durchfahrt eines aus Kunstfelsen angelegten Tunnels in einen 32 Meter hohen Looping. Mit Hilfe des unteren Videos k√∂nnen Sie die Zeit $t$, $x$- und $y$-Koordinate und den Winkel $\\varphi$ des Zuges **am h√∂chsten Punkt des Loopings** speichern, Sie brauchen f√ºr diese Aufgabe nur 2 Werte (vor und nach dem h√∂chsten Punkt). Wenn das Video zu schnell l√§uft, k√∂nnen Sie die Schaltfl√§chen Pause und Neustart verwenden.\n    \n<table cellpadding=\"0\"><tbody><tr>\n<td>\n<p style=\"text-align:center;font-size:small;\">\n<img img src=\"static/dia5.svg\" alt=\"\" role=\"presentation\" class=\"img-responsive atto_image_button_middle\" style=\"height: 22em;\">\n<br>\n<b>Abbildung</b>: Blue Fire Megacoaster\n</p>\n</td>\n<td width=\"20\"></td>\n<tr>\n</tr>\n</tbody></table> \n\n</div>    ","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"0cd8ad","input":"**k\\*)** Bestimmen Sie im obrigen Code aus den Nullstellen die Periodendauer `T`. \n\nTipp: Differenz aus erster und letzter Nullstelle anschauen.\n\nTipp: Die Anzahl an Nullstellen ist `len(nullstellen)`, die letzte Nullstelle kann auch mit `nullstellen[-1]` genutzt werden. Die `-1` bedeutet bei Listen die \"erste Stelle von rechts.\"","pos":53,"type":"cell"}
{"cell_type":"markdown","id":"0d1259","input":"**d)** Weisen Sie den ersten Eintr√§gen der arrays die jeweiligen Startwerte zu. So ist unter anderem $t_0 = 0.0$, d.h. `t[0] = 0.0`.","pos":33,"type":"cell"}
{"cell_type":"markdown","id":"1cfa15","input":"**c)** Nun gilt es rekursiv die Werte zu allen Zeiten zu berechnen. Diese sollen als drei numpy arrays `t, phi, phi_punkt` gespeichert werden. Dabei sind die Elemente `t[i], phi[i], phi_punkt[i]` die Werte $t_i,\\, \\varphi(t_i), \\dot{\\varphi}(t_i)$ f√ºr $i=0,\\dots,N_I$.\n\nErzeugen Sie drei leere numpy arrays (mit 0ern gef√ºllt) der richtigen L√§nge. Tipp: `np.zeros`, wie viele Werte f√ºr $i$ gibt es?","pos":30,"type":"cell"}
{"cell_type":"markdown","id":"1edbc0","input":"**e)** Was ist die Beschleunigung des Zuges am h√∂chsten Punkt des Loopings?","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"284ed9","input":"**Vorgehensweise**\n\n**a)** F√ºhren Sie den folgenden Code aus, um die Animation zu starten. Sie k√∂nnen die $t, x, y$ und $\\varphi$-Daten speichern, wenn Sie auf die Animation klicken. .","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"2fa5ef","input":"**b)** F√ºhren Sie den folgenden Code aus, um die gespeicherten Werte von $t, x, y$ und $\\varphi$ zu laden.","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"317145","input":"**e)** Da die Werte $\\varphi(t_0), \\dot{\\varphi}(t_0)$ bekannt sind, k√∂nnen nun die Werte zur Zeit $t_1$ berechnet werden. Danach kann man die Werte zur Zeit $t_2$ berechnen, dann zur Zeit $t_3$, und so weiter.\n\nDiese 10000 Schritte von Hand zu programmieren ist weder machbar noch lesbar, daher wird eine **for-Schleife** verwendet, um diesen iterativen Vorgang zu automatisieren.\n\nInnerhalb der For-Schleife zeigt gibt Variable `i` an von welchen Werten ausgehend weitergerechnet werden soll. Die For-Schleife muss entsprechend bei `i` gleich 0 anfangen, und rechtzeitig aufh√∂ren, da $t_{N_I}$ der gr√∂√üte definierte Zeitpunkt ist und keinen Nachfolger hat.\n\nWann immer der Inhalt der For-Schleife abgearbeitet wurde, erh√∂ht sich die Variable `i` um 1, und der Inhalt der For-Schleife wird erneut abgearbeitet. Da `i` erh√∂ht worden ist, wird jetzt nat√ºrlich der n√§chste Zeitpunkt an Werten berechnet, und nicht der selbe wie zuvor. Wenn `i` die obere Schranke die in der ersten Zeile der For-Schleife gegeben ist erreicht, wird der Inhalt der Schleife nicht ausgef√ºhrt, die Schleife ist beendet.\n\nWas ist der kleinste Wert von $i$ wenn Rekursionen der Form $i \\mapsto i+1$ ben√∂tigt werden? Was ist der gr√∂√üte Wert? Vervollst√§ndigen Sie entsprechend den Code.","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"32b1ba","input":"\n<div style= \"color: black;background-color: rgba(0,177,172, 0.1) ;margin: 10 px auto; padding: 10px; border-radius: 10px\">\n<p style=\"font-size:12pt; text-align:center; color:   black;background-color: rgba(0,177,172, 0.1) ;margin: 10 px auto; padding: 10px; border-radius: 10px\" id=\"2\"><b>  Aufgabe 2 </b>  </p> \n\n\nEine Feder h√§ngt senkrecht, wenn ein Objekt mit einer Masse von $M = 1 \\text{ kg}$ daran aufgeh√§ngt ist, nimmt seine L√§nge um $8 \\text{ cm}$ zu. Die Feder wird dann horizontal montiert und mit einem Massenblock $m = 2 \\text{ kg}$ versehen.  Der Block kann ohne Reibung horizontal gleiten.\n\nDer Block wird durch eine √§u√üere Kraft in der positiven $x$-Richtung aus der Ruhelage verschoben. Bei $t = 0$, wenn die Blockverschiebung $x(0) = 0,05 \\text{ m}$ betr√§gt und ihre Geschwindigkeit $v(0) = 0,7 \\frac{\\text{m}}{\\text{s}}$ ist, wird die √§u√üere Kraft entfernt und der Block beginnt zu schwingen.\n    \n    \n</div>","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"32d3d3","input":"<mark>\n    Die nachfolgenden Teilaufgaben sind <b>Bonus</b> und mit Sternchen * makiert </mark>, mit dem Ziel die numerische L√∂sung mit der bekannten Kleinwinkeln√§herung zu vergleichen. Anschlie√üend wird die Periodendauer numerisch f√ºr verschiedene Auslenkungen $\\varphi_0$ bestimmt.\n\nDer pr√§sentierte physikalische Sachverhalt, und die numerischen Methoden, tauchen im weiteren Studium wieder auf, und werden dann ausf√ºhrlicher besprochen. Sie sind aber in dieser Vorlesung nat√ºrlich nicht klausurrelevant.","pos":44,"type":"cell"}
{"cell_type":"markdown","id":"500aff","input":"<div>\n    <img src=\"static/FHAachen-logo2.svg\" style=\"float: right;height: 15em;\">\n</div>\n\n<div>\n    <img src=\"static/IIIPIB_RWTH.png\" style=\"float: right;height: 6.5em;\">\n</div>\n\n<p style=\"font-size:12pt\";> <b> Einf√ºhrung in die Physik -  Sommersemester 2021</b> <br>\n<b> Prof. Dr. Mottaghy, Prof. Dr.  Roth </b><br>\n<b> Fachbereich Energietechnik/  Lehrstuhl f√ºr Experimentalphysik III B  </b>\n</p>\n    \n## √úbung 5: Periodische Bewegung\n\n----\n1. [Looping](#1)\n2. [Harmonische Schwingung](#2)\n3. [Fadenpendel](#3)\n---","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"57be70","input":"**c)** Berechnen Sie den Radius des Halbkreises, gegeben sei $x_m = 34 \\text{ m}$ und $y_m = 19,46 \\text{ m}$\n$$r^2 = (x-x_m)^2 + (y - y_m)^2$$","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"6571fa","input":"**h\\*)** Mit Jupyter Notebooks kann der Startwinkel $\\varphi_0$ auch visuell ver√§ndert werden. Daf√ºr muss der bisherige Code in eine Funktion ausgelagert werden, wie in nachfolgenden Codezelle zu sehen. Die Funktion gibt die drei numpy arrays zur√ºck, statt sie als Variablen au√üerhalb der Funktion zu definieren. Versuchen Sie den Code zu verstehen:","pos":45,"type":"cell"}
{"cell_type":"markdown","id":"79a79a","input":"**d)** Mit welcher Geschwindigkeit (Betrag) bewegt sich der Zug am h√∂chsten Punkt des Looping?","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"7faec0","input":"Um die Differentialgleichung\n$$ \\ddot{\\varphi} = - \\frac{g}{l} \\sin(\\varphi) $$\nzu l√∂sen, wird das Zeitinterval $[0;t_{max}]$ in $N_I=10000$ gleichgro√üe Intervalle zerlegt. \n\nDadurch entstehen diskrete Zeitpunkte $t_i$ mit $i=0, \\dots, N_I$ mit konstanten Abstand $\\Delta t = t_{max}/N_I$. Ziel ist dann ungef√§hre Werte der Auslenkung $\\varphi(t_i)$ und Winkelgeschwindigkeit $\\dot{\\varphi}(t_i)$ zu diesen Zeitpunkten zu berechnen.\n\nDaf√ºr kann die Definition der Ableitung herangezogen werden:\n$$ \\dot{\\varphi}(t) = \\frac{\\text{d}}{\\text{d}t} \\varphi(t) = \\lim_{h \\to 0} \\frac{\\varphi(t+h)-\\varphi(t)}{h} $$\nStatt $h$ gegen $0$ gehen zu lassen setzen wir es auf einen kleinen Wert: $h=\\Delta t$.\n\nEntsprechend erhalten wir die Gleichung\n$$ \\dot{\\varphi}(t) \\approx \\frac{\\varphi(t+\\Delta t) - \\varphi(t)}{\\Delta t} $$\n\nSetzt man jetzt $t=t_i$ auf einen der diskreten Zeitpunkte, so ist $t_i + \\Delta t = t_{i+1}$ der n√§chste Zeitpunkt. Umstellen nach $\\varphi(t_{i+1})$ liefert:\n$$ \\dot{\\varphi}(t_i) \\approx \\frac{\\varphi(t_{i+1}) - \\varphi(t_i)}{\\Delta t} $$\n$$\\Rightarrow \\varphi(t_{i+1}) \\approx \\varphi(t_i)+ \\dot{\\varphi}(t_i) \\cdot \\Delta t$$\n\nDies entspricht der Bewegung bei konstanter Geschwindigkeit √ºber das Interval $[t_i;t_{i+1}]$ hinweg.\n\nAnalog kann man die Definition der Ableitung auf $\\ddot{\\varphi}(t)$ anwenden:\n$$ \\ddot{\\varphi}(t_i) \\approx \\frac{\\dot{\\varphi}(t_i+\\Delta t) - \\dot{\\varphi}(t_i)}{\\Delta t} $$\n$$ \\Rightarrow \\dot{\\varphi}(t_{i+1}) = \\dot{\\varphi}(t_i) + \\ddot{\\varphi}(t_i) \\cdot \\Delta t $$\n\nDies entspricht der Bewegung bei konstanter Beschleunigung √ºber das Interval $[t_i;t_{i+1}]$ hinweg.\n\nF√ºr den Ausdruck $\\ddot{\\varphi}(t_i)$ kann die soeben programmierte Funktion `phi_punktpunkt` verwendet werden, es wird dann nur die Auslenkung `phi=`$\\varphi(t_i)$ ben√∂tigt.\n\nZusammengefasst lassen sich aus den Werten $\\varphi(t_i), \\dot{\\varphi}(t_i)$ somit die Werte zum n√§chsten Zeitpunkt $\\varphi(t_{i+1})$, $\\dot{\\varphi}(t_{i+1})$ berechnen:\n\n$$ \\ddot{\\varphi}(t_i) = -\\frac{g}{l} \\sin(\\varphi(t_i)) $$\n$$ \\dot{\\varphi}(t_{i+1}) = \\dot{\\varphi}(t_i) + \\ddot{\\varphi}(t_i) \\cdot \\Delta t $$\n$$ \\varphi(t_{i+1}) = \\varphi(t_i) + \\dot{\\varphi}(t_{i}) \\cdot \\Delta t $$\n\n\n**b**) Erstellen Sie eine Funktion `naechstes_phi` die aus den Werten $\\varphi(t_i)$ (`phi_i`) und $\\dot{\\varphi}(t_i)$ (`phi_dot_i`) den Wert $\\varphi(t_{i+1})$ berechnet. Eine √§hnliche Funktion `naechstes_phi_punkt` die $\\dot{\\varphi}(t_{i+1})$ berechnet ist bereits vorgeben.","pos":28,"type":"cell"}
{"cell_type":"markdown","id":"8987ad","input":"\n\n**a)** Programmieren Sie eine Funktion `phi_punktpunkt` welche den Winkel $\\varphi$ (`phi`) in Bogenma√ü als Argument nimmt, und die Beschleunigung $\\ddot{\\varphi}$ (Bogenma√ü pro $s^2$) zur√ºckgibt.","pos":26,"type":"cell"}
{"cell_type":"markdown","id":"9095d5","input":"**f)** Die Masse des Zuges betr√§gt 10 t (voll besetzt), berechnen Sie die Zentripetalkraft","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"a0d570","input":"**j\\*)** Es ist zu beobachten dass die Anzahl an Schwingungen, und somit auch die Periodendauer $T$ von der Startauslenkung abh√§ngt. Dies ist bereits der erste Unterschied zum Federpendel, welches die gleiche Frequenz hat unabh√§ngig von der Startauslenkung.\n\nDie Periodendauer l√§sst aus dem zeitlichen Abstand der Nullstellen von $\\varphi(t)$ bestimmen. Um letztere zu ermitteln wird eine for-Schleife genutzt, die einen Wechsel des Vorzeichens von `phi[i]` zu `phi[i+1]` sucht. Die Nullstelle liegt dann ungef√§hr bei `t[i]`. \n\nAlle so gefundenen Nullstellen werden als Liste gesammelt.\n\nIn Python k√∂nnen Listen mit `liste.append(element)` erweitert werden, das neue Element wird dann hinten (rechts) angef√ºgt. \n\nDas Vorzeichen einer Zahl kann mit `np.sign(x)` bestimmt werden, die Funktion gibt $+1$ f√ºr positive und $-1$ f√ºr negative Zahlen zur√ºck. Zwei solche Zahlen werden mit `!=` auf Ungleichheit gepr√ºft.\n\nVervollst√§ndigen Sie den Code an den drei markierten Stellen.","pos":51,"type":"cell"}
{"cell_type":"markdown","id":"a908a9","input":"<div class=\"alert alert-block alert-info\">\n<i class=\"fas fa-lightbulb\"></i> <b>Code Tipps:</b> \n<ul>\n<code>for</code>-Schleifen dienen dazu bei Wiederholungsanweisungen beschr√§nkten Iterationen der Form ‚ÄûF√ºhre A genau $n$-mal aus‚Äú oder \"f√ºhre eine Anweisung f√ºr alle Elemente eines Iterators durch\" auszuf√ºhren. Die Syntax ist:\n\n```python\nfor item in iterable:\n    Anweisungen\n```\n    \n</div>\n    \n<div class=\"alert alert-block alert-danger\">\n<b>Vorsicht!</b> \n<ul>\n<p> Sie bekommen einen Laufzeitfehler der Form <code>IndexError: list assignment index out of range</code>, wenn ein Zugriff auf ein Element des Arrays au√üerhalb der Feldgrenzen stattfindet. Beachten Sie, dass der Index eines Arrays immer eine ganze Zahl sein muss. Sie erhalten einen Syntaxfehler, falls die Indexposition oder die L√§nge des Feldes eine Gleitkommazahl ist.\n </p>     \n</div>","pos":38,"type":"cell"}
{"cell_type":"markdown","id":"adaf3d","input":"<div style=\" border: 2px solid black;margin: 10px auto; padding: 10px; border-radius: 10px;\">\n\n\n####  Schwingungen\n\nEine Schwingung ist eine sich wiederholender Vorgang. Damit eine Schwingung entsteht, muÃàssen zwei Bedingungen erfuÃàllt\nsein:\n-  es muss eine **ruÃàcktreibende Kraft** (zur Ruhelage hin) wirken, und (beim Federpendel die Federkraft)\n-  eine **TraÃàgheit** muss vorhanden sein (beim Federpendel die Masse). \n\n\n<table cellpadding=\"0\"><tbody><tr>\n<td>\n<p style=\"text-align:center;font-size:small;\">\n<img img src=\"static/sch3.png\" alt=\"\" role=\"presentation\" class=\"img-responsive atto_image_button_middle\" style=\"height: 34em;\">\n<br>\n<b>Abbildung</b>: Harmonische Schwingung\n</p>\n</td>\n<td width=\"20\"></td>\n<tr>\n<td colspan=\"3\">\n<p style=\"text-align:center;font-size:smaller;color:gray;\">\nQuelle: phys.libretext.org\n</p>\n</td>\n</tr>\n</tbody></table>    \n\n\nAls **harmonisch** wird eine Schwingung bezeichnet, deren Verlauf\ndurch eine **Sinusfunktion** beschrieben werden kann.\n\nDie grundlegenden Eigenschaften von **harmonischen Schwingungen**\nsind:\n- Die Periode $T$, Einheit $[T]$ = s\n- Die Frequenz $f$, Einheit $[f]$ = s‚Åª¬π = Hz\n- Die Kreisfrequenz $\\omega$, Einheit $[\\omega]$ = rad s‚Åª¬π\n- Die Amplidute $A$, Einheit $[a]$ = m.\n\nWenn wir das 2. Newtonsche Axiom auf das Federpendel anwenden, erhalten wir die Differenzialgleichung der harmonische\nSchwingung:\n\n$$m\\ddot{x}+ Dx=0$$\n\nDie LoÃàsung der DGL ist die Schwingungsfunktion:\n\n$$x(t)= A \\cdot \\sin(\\omega t + \\varphi_0)$$\n\nDie Kreisfrequenz, oder auch **Eigenkreisfrequenz** - beim Federpendel\nwird damit\n\n$$\\omega = \\sqrt{\\frac{D}{m}}.$$\n    \n    \n    \n</div>","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"aee763","input":"In der Vorlesung wurde bereits das idealisierte Fadenpendel (auch mathematisches Pendel genannt) besprochen. F√ºr kleine Auslenkungen wurde die **Kleinwinkeln√§herung** verwendet, um es auf eine Differentialgleichung der selben Form des Federpendels zur√ºckzuf√ºhren, welche per Hand l√∂sbar ist.\n\nDiese Aufgabe besch√§ftigt sich nun damit wie das Fandenpendel auch **ohne** Kleinwinkeln√§herung **numerisch** gel√∂st werden kann. Differentialgleichungen sind von gro√üer Bedeutung in der Physik und werden im Verlauf Ihres weiteren Studiums h√§ufig auftreten. Nicht immer ist eine exakte L√∂sung per Hand m√∂glich, so zum Beispiel auch beim Fadenpendel. Deshalb sind die hier presentierten numerischen Methoden, oder √§hnliche Methoden zumindest, von N√∂ten. Das numerische L√∂sen von Differentialgleichungen geht dabei √ºber den Stoff des ersten Semesters hinaus, wird aber in h√∂heren Semestern erneut besprochen.\n\nF√ºr Interessierte bietet das Video [https://www.youtube.com/watch?v=p_di4Zn4wz4&vl=es-419](https://www.youtube.com/watch?v=p_di4Zn4wz4&vl=es-419) eine allgemeine kurze (30 min√ºtige) Einf√ºhrung in Differentialgleichungen und ihre L√∂sungen.\n\nZun√§chst wird kurz wiederholt wie die Bewegungsgleichung eines Fadenpendels aussieht.\n\n<img src=\"static/wiki_Fadenpendel.png\" align=\"center\" width=\"256\" height=\"313\"/>\n\nDem Winkel $\\varphi$ wirkt eine tangentiale Kraft $F_\\text{tan}$ entgegen. Trigonometrie liefert hierf√ºr die Formel:\n$$ F_\\text{tan} = - F_\\text{G} \\cdot \\sin(\\varphi) = - m\\cdot g \\cdot \\sin(\\varphi) $$\nEntsprechend ist die tangentiale Beschleunigung:\n$$ a_\\text{tan} = - g \\cdot \\sin(\\varphi) $$\n\nAusgedr√ºckt als Winkelbeschleunigung mit $a_\\text{tan} = l \\cdot \\ddot{\\varphi}$ ergibt sich die Differentialgleichung:\n$$ \\ddot{\\varphi} = - \\frac{g}{l} \\sin(\\varphi) $$\n\nIn der Vorlesung wurde die **Kleinwinkeln√§herung** benutzt: $\\sin(\\varphi) \\approx \\varphi$ f√ºr kleine $\\varphi$.   \nMit dieser ist die Differentialgleichung dann identisch zu der des Federpendels:\n$$ \\ddot{\\varphi} = - \\frac{g}{l} \\varphi $$\n\nIm folgenden soll die Differentialgleichung des Fadenpendels **ohne** Kleinwinkeln√§herung numerisch gel√∂st werden.\n\nDie folgenden Parameter des Fadenpendels sind vorgegeben:\n- die Erdbeschleunigung ist $g=9,81~m/s^2$\n- die L√§nge des Pendels ist $l=1~m$\n\nZur Startzeit $t=0$ wird das Pendel mit einer Auslenkung $\\varphi_0=45^\\circ$ losgelassen, hat also Winkelgeschwindigkeit $\\dot{\\varphi}(0)=0$. Das reibungslose Schwingen des Fadenpendels soll dann f√ºr das Interval bis $t_\\text{max}=10~s$ berechnet werden.","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"b24d41","input":"**i\\*)** Vervollst√§ndigen Sie den folgenden Code um die Funktion `kleinwinkelnaeherung(phi_0, t)` welche die L√∂sung der Kleinwinkeln√§herung mit maximaler Auslenkung $\\varphi_0$ zum Zeitpunkt $t$ berechnet. Tipp: Verwenden Sie `np.cos(x)` f√ºr die Schwingung, da die Winkelgeschwindigkeit zu Beginn  $0$ ist.\n\nIn der Funktion `plot_loesung` wird dann die kleinwinkelnaeherung zusammen mit der numerischen L√∂sung geplottet. \n\nDie letzte Zeile sorgt daf√ºr dass ein Schieberegler angezeigt wird, der nach jeder √Ñnderung erneut die Funktion `plot_loesung` ausf√ºhrt, mit jeweils anderen Werten f√ºr `phi_0`.\n\nF√ºhren Sie den fertigen Code aus. F√ºr welche Werte von $\\varphi_0$ ist die Kleinwinkeln√§herung gut, f√ºr welche schlecht?","pos":49,"type":"cell"}
{"cell_type":"markdown","id":"bc359d","input":"**b)** Bestimmen sie $x(t)$ mit Hilfe des Ansatzes $x(t)= A \\cdot \\sin(\\omega t) + B \\cdot \\cos(\\omega t) $ und den Anfangsbedingungen aus der Aufgabenstellung, bestimmen Sie weiter auch $v(t)$","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"c3b71c","input":"**a)** Mit welcher Frequenz wird er schwingen?","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"c81245","input":"**f)** Nun muss der eigentliche Rekursionsschritt programmiert werden. Daf√ºr stehen bereits die Funktionen `next_phi` und `next_phi_dot` zur Verf√ºgung.\n\nBerechnen und weisen Sie die Werte f√ºr `t[i+1]` ($=t_{i+1}$), `phi[i+1]` ($=\\varphi(t_{i+1})$) und `phi_dot[i+1]` ($=\\dot{\\varphi}(t_{i+1})$) zu. Dies muss in der For-Schleife passieren, da nur so der Code mehrfach ausgef√ºhrt wird.","pos":40,"type":"cell"}
{"cell_type":"markdown","id":"ca742c","input":"<div style= \"color: black;background-color: rgba(0,177,172, 0.1) ;margin: 10 px auto; padding: 10px; border-radius: 10px\">\n<p style=\"font-size:12pt; text-align:center; color:   black;background-color: rgba(0,177,172, 0.1) ;margin: 10 px auto; padding: 10px; border-radius: 10px\" id=\"2\"><b>  Aufgabe 3 </b>  </p> \n    \n    \n</div> ","pos":24,"type":"cell"}
{"cell_type":"markdown","id":"cbea84","input":"\n\n<div style=\" border: 2px solid blue ;margin: 10px auto; padding: 10px; border-radius: 10px;\">\n\n\n### `for`-Schleife\n\nEine `for`-Schleife kann man in folgender Form deklarieren, in dem man √ºber einen Iterator (Liste, Array, Tupel, range etc.) die Elemente dessen durchgeht:\n```python\nfor item in list:\n    Anweisungen\n```\n\nManchmal sind Anweisungen mehrfach zu wiederholen. Das Kopieren unz√§hliger gleicher Anweisungen ist ineffizient und unpraktikabel, da die Anzahl der Wiederholungen oftmals zu gro√ü ist. Eine `for`-Schleife kann die gleiche Aufgabe so oft ausf√ºhren, wie wir sie eingegeben haben. \n\nAls Beispiel werden wir die Winkelgeschwindigkeit $\\omega$ numerisch berechnen\n\n$$\\omega = \\frac{\\text{d}\\varphi}{\\text{d}t} \\approx \\frac{\\Delta \\varphi}{\\Delta t}$$\n\n\n\n1. Bereiten Sie die Listen oder Arrays von Daten vor, die Sie iterieren m√∂chten.\n\n```python\nt = np.array([0, 0.011, 0.022, 0.033, 0.044,0.055, 0.066, 0.077, 0.088, 0.1])    # in s\nphi = np.array([ 0, 11.851, 20.740, 26.666, 29.629, 29.629, 26.666, 20.740, 11.851, 0])  # -\n```\n\n2. W√§hlen Sie einen geeigneten *Iterator* `i` (Sie k√∂nnen anderen Variablennamen verwenden); in diesem Fall werden wir *die L√§nge von `t`* verwenden, weil wir alle Elemente von `t` und `F` iterieren wollen (sie haben die gleiche L√§nge).\n\n```python\nfor i in range(0,len(t)-1):\n```\n\nDie `range`-Funktion liefert Listen, die arithmetischen Aufz√§hlungen entsprechen, von Anfangswert `0` bist Endwert `len(t)-1` (Vergessen Sie nicht, dass Python-Listen und -Arrays mit dem Index 0 beginnen!) \n\n3. Klicken Sie auf <code>ENTER ‚Üµ</code> und schreiben Sie die Anweisungen Ihrer `for`-Schleife, Sie sollten am Anfang eine Einr√ºckung durch <code>TAB</code> erhalten. Die Anweisungen f√ºr diese Beispiel sind:   \n    i. Berechnung der Winkelgeschwindigkeit \n    \n    $$\\omega_i = \\dfrac{\\varphi_{i+1}-\\varphi_{i}}{t_{i+1}-t_{i}}$$  \n    \n```python\nfor i in range(0,len(t)-1):\n    omega[i] = (phi[i+1] - phi[i])/(t[i+1]-t[i]) \n```\nDie Variable `omega_i` wird sich jedes Mal √§ndern, wenn der Iterator dies tut.\n\n4. Was als n√§chstes mit der iterierten Variable `omega_i` zu tun ist, h√§ngt von Ihrer Aufgabe ab. Sie k√∂nnen die Ergebnisse einfach ausdrucken, oder, was h√§ufiger gemacht wird, Sie speichern die bearbeitete Variable in einer Liste wie folgt:\n\n```python\nomega = np.zeros([len(t)])\nfor i in range(0,len(t)-1):\n    omega[i] = (phi[i+1] - phi[i])/(t[i+1]-t[i])\n```\n\nSie sollen vor der Deklaration der `for`-Schleife eine leere Liste oder Array definieren (hier `omega = np.zeros()`), jeder generierte `omega[i]`-Wert wird in der Liste `omega` gespeichert.\n    \n</div>","pos":36,"type":"cell"}
{"cell_type":"markdown","id":"e77cf1","input":"**g)** Plotten Sie die Zeit $t$ gegen die Auslenkung $\\varphi(t)$. Sie k√∂nnen daf√ºr die soeben mit Werten gef√ºllten arrays `t, phi` verwenden.","pos":41,"type":"cell"}
{"cell_type":"markdown","id":"ec26cc","input":"<div style=\" border: 2px solid black;margin: 10px auto; padding: 10px; border-radius: 10px;\">\n  \n\n##### Die gleichfoÃàrmige Kreisbewegung: \n\nDie **Bahngeschwindigkeit** ist die zeitliche AÃànderung des Ortes auf dem Kreis (mit $s$: Kreisbogen):\n$$v = \\dot{s}$$\n\nEs aÃàndert sich aber nur $\\varphi$, so dass man schreiben kann\n\n$$v = \\dot{s} = r \\dot{\\varphi} = r \\omega$$\n\nMit der neuen GroÃà√üe Winkelgeschwindigkeit, welche bei der gleichfoÃàrmigen Kreisbewegung konstant ist:\n\n$$\\omega = \\frac{2 \\pi}{T} = 2 \\pi f$$\n    \n<table cellpadding=\"0\"><tbody><tr>\n<td>\n<p style=\"text-align:center;font-size:small;\">\n<img img src=\"static/dia4.svg\" alt=\"\" role=\"presentation\" class=\"img-responsive atto_image_button_middle\" style=\"height: 20em;\">\n<br>\n<b>Abbildung</b>: Kreisbewegung\n</p>\n</td>\n<td width=\"20\"></td>\n<tr>\n</tr>\n</tbody></table> \n\n\nDa ein Massenpunkt auch bei **gleichfoÃàrmiger Kreisbewegung** staÃàndig die Richtung aÃàndert, aÃàndert sich die Geschwindigkeit und er wird beschleunigt. Dazu betrachten wir einen Punkt auf dem Kreis zu zwei verschiedenen Zeitpunkten. Weil $\\vec{v}$ immer senkrecht auf $\\vec{r}$ steht, gilt fuÃàr die BetraÃàge:\n\n$$\\frac{\\Delta v}{\\Delta t} = \\frac{v}{r}\\frac{\\Delta s}{\\Delta t} $$\n\nDer GrenzuÃàbergang zur Momentanbeschleunigung und -geschwindigkeit ergibt die Zentripetalbeschleunigung:\n\n$$a = \\frac{\\text{d}v}{\\text{d}t} =  \\frac{v}{r}v$$\n\n$$a_{_{ZP}} = \\frac{v^2}{r} = \\omega^2r.$$\n\n##### Zentripetalkraft: \n\nDie Zentripetalkraft (auch Radialkraft) ist die Komponente der aÃàu√üeren Kraft zum Mittelpunkt des KruÃàmmungskreises, die auf einen KoÃàrper wirken muss, damit sich dieser im Inertialsystem auf einer gekruÃàmmten Bahn bewegt\n\nMit der Radialbeschleunigung ergibt sich nach dem 2. Axiom:\n \n$$F_{_{ZP}} = m \\frac{v^2}{r}$$\n    \n    \n</div>","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"f651f5","input":"<div class=\"alert alert-block alert-info\">\n<i class=\"fas fa-lightbulb\"></i> <b>Code Tipps:</b> \n<ul>  \n<b>Erzeugen leerer numpy arrays</b>:\n    <p>Mit <code>array=np.zeros(laenge)</code> kann ein numpy array der L√§nge \"laenge\" erzeugt werden, welches nur Eintr√§ge mit dem Wert \"0.0\" hat.<p>\n    <p>Dies ist n√ºtzlich um anschlie√üend einzelne Eintr√§ge zu √§ndern, z.B. <code>array[3]=5.0</code>, und so das array zu f√ºllen.</p>\n    <p>Wie immer bei numpy arrays wird auf das erste Element <code>array[0]</code> mit index 0 zugegriffen, und auf das letzte Element mit index <code>array[laenge-1]</code></p>\n</div>","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"f74b0b","input":"___","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"faf890","input":"**c)** Generieren Sie Diagramme der beiden Funktionen $x(t)$ und $v(t)$ f√ºr zwei Perioden.","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"fb4f8e","input":"<div class=\"alert alert-block alert-info\">\n<b>Code Tipps:</b> \n<ul>  \n<b>Mehrfachzuweisung</b>:\n    <p>In Python k√∂nnen mehrere Variablen auf einmal einen Wert zugewiesen bekommen:</p>\n    <p><code>a, b, c = 1, 2, 3</code></p>\n    <p>Analog k√∂nnen in einer Funktion auch mehrere Werte auf einmal zur√ºckgegeben werden:</p>\n    <p><code>def demo():<br>&nbsp return 4, 5, 6</code></p>\n    <p>Um die R√ºckgabewerte einer solchen Funktion zu verwenden, muss die gleiche Anzahl Variablen verwendet werden.</p>\n    <p><code>x, y, z = demo()<br># x, y, bzw. z haben jetzt den Wert 4, 5, bzw. 6. </code></p>\n</div>","pos":46,"type":"cell"}
{"cell_type":"markdown","id":"fc6460","input":"**l\\*)** Vervollst√§ndigen Sie im folgenden Code die Periodendauer `T_Kleinwinkel` des Systems in der Kleinwinkeln√§herung. Es wird dann in Abh√§ngigkeit der Start-Auslenkung $\\varphi_0$ die Periodendauer $T$ des Fadenpendels geplottet.","pos":54,"type":"cell"}
{"id":0,"time":1624354234619,"type":"user"}
{"last_load":1624354234124,"type":"file"}